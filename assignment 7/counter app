<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Counter App</title>
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3a86ff;
            --dark-color: #212529;
            --light-color: #f8f9fa;
            --danger-color: #ef233c;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: var(--dark-color);
        }
        
        .container {
            background-color: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 2.5rem;
            width: 90%;
            max-width: 400px;
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .container:hover {
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
        }
        
        h1 {
            margin-bottom: 1.5rem;
            color: var(--primary-color);
            font-weight: 600;
        }
        
        .counter-display {
            font-size: 5rem;
            font-weight: 700;
            margin: 1.5rem 0;
            color: var(--dark-color);
            transition: all 0.2s ease;
        }
        
        .positive {
            color: var(--primary-color);
        }
        
        .negative {
            color: var(--danger-color);
        }
        
        .buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
        }
        
        .btn {
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn-increase {
            background-color: var(--primary-color);
            color: white;
        }
        
        .btn-increase:hover {
            background-color: var(--secondary-color);
        }
        
        .btn-decrease {
            background-color: #f8f9fa;
            color: var(--dark-color);
            border: 2px solid #dee2e6;
        }
        
        .btn-decrease:hover {
            background-color: #e9ecef;
        }
        
        .btn-reset {
            background-color: var(--danger-color);
            color: white;
        }
        
        .btn-reset:hover {
            filter: brightness(1.1);
        }
        
        .settings {
            margin-top: 2rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .step-control {
            margin-top: 1rem;
            width: 100%;
        }
        
        .step-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #495057;
        }
        
        .step-input {
            width: 100%;
            padding: 0.5rem;
            border-radius: 8px;
            border: 2px solid #dee2e6;
            font-size: 1rem;
            transition: all 0.2s ease;
        }
        
        .step-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.25);
        }
        
        @media (max-width: 480px) {
            .container {
                padding: 1.5rem;
            }
            
            h1 {
                font-size: 1.5rem;
            }
            
            .counter-display {
                font-size: 3.5rem;
            }
            
            .btn {
                padding: 0.6rem 1.2rem;
                font-size: 0.9rem;
            }
            
            .buttons {
                flex-direction: column;
                gap: 0.75rem;
            }
        }
        
        /* Animation classes */
        .pulse {
            animation: pulse 0.5s ease;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .shake {
            animation: shake 0.5s ease;
        }
        
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-5px); }
            40%, 80% { transform: translateX(5px); }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Counter App</h1>
        <div id="counter" class="counter-display">0</div>
        <div class="buttons">
            <button class="btn btn-decrease" id="decrease">Decrease</button>
            <button class="btn btn-reset" id="reset">Reset</button>
            <button class="btn btn-increase" id="increase">Increase</button>
        </div>
        <div class="settings">
            <div class="step-control">
                <label for="step" class="step-label">Step Value:</label>
                <input type="number" id="step" class="step-input" min="1" value="1" placeholder="Enter step value">
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const counterEl = document.getElementById('counter');
            const increaseBtn = document.getElementById('increase');
            const decreaseBtn = document.getElementById('decrease');
            const resetBtn = document.getElementById('reset');
            const stepInput = document.getElementById('step');
            
            let count = 0;
            let step = 1;
            
            // Function to update counter display
            function updateCounter() {
                counterEl.textContent = count;
                
                // Add color classes based on value
                counterEl.classList.remove('positive', 'negative');
                if (count > 0) {
                    counterEl.classList.add('positive');
                } else if (count < 0) {
                    counterEl.classList.add('negative');
                }
                
                // Add pulse animation
                counterEl.classList.add('pulse');
                setTimeout(() => {
                    counterEl.classList.remove('pulse');
                }, 500);
            }
            
            // Function to handle step changes
            function updateStep() {
                const newStep = parseInt(stepInput.value);
                if (!isNaN(newStep) && newStep > 0) {
                    step = newStep;
                } else {
                    step = 1;
                    stepInput.value = 1;
                }
            }
            
            // Event listeners
            increaseBtn.addEventListener('click', function() {
                count += step;
                updateCounter();
            });
            
            decreaseBtn.addEventListener('click', function() {
                count -= step;
                updateCounter();
                
                // Add shake animation if count goes negative
                if (count < 0) {
                    counterEl.classList.add('shake');
                    setTimeout(() => {
                        counterEl.classList.remove('shake');
                    }, 500);
                }
            });
            
            resetBtn.addEventListener('click', function() {
                count = 0;
                updateCounter();
                step = 1;
                stepInput.value = 1;
                
                // Add special animation for reset
                counterEl.classList.add('pulse');
                setTimeout(() => {
                    counterEl.classList.remove('pulse');
                }, 500);
            });
            
            stepInput.addEventListener('change', updateStep);
            stepInput.addEventListener('input', updateStep);
            
            // Keyboard support
            document.addEventListener('keydown', function(e) {
                switch(e.key) {
                    case 'ArrowUp':
                    case '+':
                        count += step;
                        updateCounter();
                        e.preventDefault();
                        break;
                    case 'ArrowDown':
                    case '-':
                        count -= step;
                        updateCounter();
                        e.preventDefault();
                        break;
                    case 'r':
                    case 'R':
                        if (!['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase())) {
                            count = 0;
                            updateCounter();
                            e.preventDefault();
                        }
                        break;
                }
            });
            
            // Initial update
            updateCounter();
        });
    </script>
</body>
</html>
